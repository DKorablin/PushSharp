name: Test, Buid, Release

on:
  workflow_dispatch:

env:
  SolutionName: ${{github.event.repository.name}}

jobs:
  version:
    name: Incrementing version number
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{steps.tag_version.outputs.new_version}}
      new_tag: ${{steps.tag_version.outputs.new_tag}}
      changelog: ${{steps.tag_version.outputs.changelog}}
    steps:
    - name: Updating version number
      id: tag_version
      uses: mathieudutour/github-tag-action@v6.2
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        custom_tag: 4.1.0

  build_net_framework:
    name: Building .NET Framework assemblies
    needs: [version]
    runs-on: windows-latest
    steps:
    - name: Decoding SNK
      id: sign_key_file
      uses: timheuer/base64-to-file@v1.2
      with:
        fileName: 'Signature.snk'
        encodedString: ${{secrets.SIGN_KEY}}
    - uses: actions/checkout@v4
      with:
        submodules: true
    - name: Setup .NET
      uses: microsoft/setup-msbuild@v2
    - name: Restoring NuGet packages
      run: nuget restore "${{github.workspace}}\${{env.SolutionName}}.sln"
    - name: Building PushSharp Amazon (.NET Framework)
      run: MSBuild -nologo -restore "${{github.workspace}}\PushSharp.Amazon\PushSharp.Amazon35.csproj" /property:Configuration=Release -property:OutputPath="${{github.workspace}}\bin\" -property:Version=${{needs.version.outputs.new_version}} -property:AssemblyOriginatorKeyFile="${{steps.sign_key_file.outputs.filePath}}"
    - name: Building PushSharp Apple (.NET Framework)
      run: MSBuild -nologo -restore "${{github.workspace}}\PushSharp.Apple\PushSharp.Apple35.csproj" /property:Configuration=Release -property:OutputPath="${{github.workspace}}\bin\" -property:Version=${{needs.version.outputs.new_version}} -property:AssemblyOriginatorKeyFile="${{steps.sign_key_file.outputs.filePath}}"
    - name: Building PushSharp Blackberry (.NET Framework)
      run: MSBuild -nologo -restore "${{github.workspace}}\PushSharp.Blackberry\PushSharp.Blackberry35.csproj" /property:Configuration=Release -property:OutputPath="${{github.workspace}}\bin\" -property:Version=${{needs.version.outputs.new_version}} -property:AssemblyOriginatorKeyFile="${{steps.sign_key_file.outputs.filePath}}"
    - name: Building PushSharp Firefox (.NET Framework)
      run: MSBuild -nologo -restore "${{github.workspace}}\PushSharp.Firefox\PushSharp.Firefox35.csproj" /property:Configuration=Release -property:OutputPath="${{github.workspace}}\bin\" -property:Version=${{needs.version.outputs.new_version}} -property:AssemblyOriginatorKeyFile="${{steps.sign_key_file.outputs.filePath}}"
    - name: Building PushSharp Google (.NET Framework)
      run: MSBuild -nologo -restore "${{github.workspace}}\PushSharp.Google\PushSharp.Google35.csproj" /property:Configuration=Release -property:OutputPath="${{github.workspace}}\bin\" -property:Version=${{needs.version.outputs.new_version}} -property:AssemblyOriginatorKeyFile="${{steps.sign_key_file.outputs.filePath}}"
    - name: Building PushSharp HuaWay (.NET Framework)
      run: MSBuild -nologo -restore "${{github.workspace}}\PushSharp.HuaWay\PushSharp.HuaWay35.csproj" /property:Configuration=Release -property:OutputPath="${{github.workspace}}\bin\" -property:Version=${{needs.version.outputs.new_version}} -property:AssemblyOriginatorKeyFile="${{steps.sign_key_file.outputs.filePath}}"
    #TODO: I need to find a better approach to sign output files without explicitly specify filename and extension
    - name: Signing PushSharp Core
      uses: dlemstra/code-sign-action@v1
      with:
        certificate: '${{secrets.SIGN_PE_CERTIFICATE}}'
        password: '${{secrets.SIGN_PE_PASSWORD}}'
        recursive: false
        files: |
          ${{github.workspace}}\bin\PushSharp.Core.dll
    - name: Signing PushSharp Amazon
      uses: dlemstra/code-sign-action@v1
      with:
        certificate: '${{secrets.SIGN_PE_CERTIFICATE}}'
        password: '${{secrets.SIGN_PE_PASSWORD}}'
        recursive: false
        files: |
          ${{github.workspace}}\bin\PushSharp.Amazon.dll
    - name: Signing PushSharp Apple
      uses: dlemstra/code-sign-action@v1
      with:
        certificate: '${{secrets.SIGN_PE_CERTIFICATE}}'
        password: '${{secrets.SIGN_PE_PASSWORD}}'
        recursive: false
        files: |
          ${{github.workspace}}\bin\PushSharp.Apple.dll
    - name: Signing PushSharp Blackberry
      uses: dlemstra/code-sign-action@v1
      with:
        certificate: '${{secrets.SIGN_PE_CERTIFICATE}}'
        password: '${{secrets.SIGN_PE_PASSWORD}}'
        recursive: false
        files: |
          ${{github.workspace}}\bin\PushSharp.Blackberry.dll
    - name: Signing PushSharp Firefox
      uses: dlemstra/code-sign-action@v1
      with:
        certificate: '${{secrets.SIGN_PE_CERTIFICATE}}'
        password: '${{secrets.SIGN_PE_PASSWORD}}'
        recursive: false
        files: |
          ${{github.workspace}}\bin\PushSharp.Firefox.dll
    - name: Signing PushSharp Google
      uses: dlemstra/code-sign-action@v1
      with:
        certificate: '${{secrets.SIGN_PE_CERTIFICATE}}'
        password: '${{secrets.SIGN_PE_PASSWORD}}'
        recursive: false
        files: |
          ${{github.workspace}}\bin\PushSharp.Google.dll
    - name: Signing PushSharp HuaWay
      uses: dlemstra/code-sign-action@v1
      with:
        certificate: '${{secrets.SIGN_PE_CERTIFICATE}}'
        password: '${{secrets.SIGN_PE_PASSWORD}}'
        recursive: false
        files: |
          ${{github.workspace}}\bin\PushSharp.HuaWay.dll
    - name: Deploying artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Net20
        path: ${{github.workspace}}/bin/*
        if-no-files-found: error

  deploy_release:
    name: Deploying release
    needs:
      - version
      - build_net_framework
    if: |
        always() &&
        (needs.build_net_framework.result == 'skipped' || needs.build_net_framework.result == 'success')
    runs-on: ubuntu-latest
    steps:
    - name: Extracting all artifacts
      uses: actions/download-artifact@v4
      with:
        path: bin
    - name: Zipping artifacts
      run: zip -qq -r ${{github.event.repository.name}}_${{needs.version.outputs.new_tag}}.zip *
      working-directory: ${{github.workspace}}/bin
    - name: Deploying GitHub release
      uses: ncipollo/release-action@v1
      with:
        artifacts: ${{github.workspace}}/bin/${{github.event.repository.name}}_${{needs.version.outputs.new_tag}}.zip
        tag: ${{needs.version.outputs.new_tag}}
        name: Auto ${{needs.version.outputs.new_tag}}
        body: ${{needs.version.outputs.changelog}}
        artifactErrorsFailBuild: true
        generateReleaseNotes: true

  deploy_nuget:
    name: Deploying NuGet package
    needs:
        - version
        - build_net_framework
    if: |
        always() &&
        (needs.build_net_framework.result == 'skipped' || needs.build_net_framework.result == 'success')
    runs-on: windows-latest

    steps:
    - name: Checkout nessesary files from repository
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          README.md
          ${{env.SolutionName}}.dll.nuspec
        sparse-checkout-cone-mode: false
    - name: Extracting all artifacts
      uses: actions/download-artifact@v4
      with:
        path: bin
    - name: Packing artifacts
      run: nuget pack ${{env.SolutionName}}.dll.nuspec -Version ${{needs.version.outputs.new_version}} -OutputDirectory nupkg
    - name: Deploying to GitHub
      run: dotnet nuget push nupkg\*.nupkg --skip-duplicate --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/DKorablin/index.json
    #- name: Deploying to NuGet
    #  run: dotnet nuget push nupkg\*.nupkg --skip-duplicate --api-key ${{ secrets.NUGET_TOKEN }} --source https://api.nuget.org/v3/index.json

  failure_cleanup:
  #error: tag '${{needs.version.outputs.new_tag}}' not found.
    name: Remove version tag on failure
    needs:
      - version
      - build_net_framework
    if: |
      always() &&
      needs.build_net_framework.result != 'success'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: false
        fetch-depth: 0 #Fetch all history for all tags and branches
    - name: Removing version tag
      run: |
        git tag -d ${{needs.version.outputs.new_tag}}